#summary Ways to interact with the BIMserver

= Introduction =

All communication with the BIMserver is done through the "Service Interface". This is basically a Java interface with a large collections of methods that can be remotely executed. Because all kinds of languages should be able to communicate with the BIMserver from remote computers, a few different language independent network based protocols have been added:
  * [SOAP]
  * [REST]
  * [Protocol Buffers]

This page describes the actual calls in the "Service Interface", please 
refer to the protocol-specific pages for the actual usage.

Note: This page describes the yet unreleased 1.1 version of the BIMserver

= Basic calls =
{{{
	String ping(String in);

	boolean login(String username, String password) throws UserException, ServerException;

	boolean autologin(String username, String hash) throws UserException, ServerException;

	SCheckinResult checkinSync(long poid, String comment, long fileSize, DataHandler ifcFile, boolean merge) throws UserException, ServerException;

	SCheckinResult checkinAsync(long poid, String comment, long fileSize, DataHandler ifcFile, boolean merge) throws UserException, ServerException;

	String checkout(long roid, ResultType resultType, boolean sync) throws UserException, ServerException;

	String checkoutLastRevision(long poid, ResultType resultType, boolean sync) throws UserException, ServerException;

	String download(long roid, ResultType resultType, boolean sync) throws UserException, ServerException;

	String downloadByOids(Set<Long> roids, Set<Long> oids, ResultType resultType, boolean sync) throws UserException, ServerException;

	String downloadOfType(long roid, String className, ResultType resultType, boolean sync) throws UserException, ServerException;

	String downloadByGuids(Set<Long> roids, Set<String> guids, ResultType resultType, boolean sync) throws UserException, ServerException;

	String downloadProjects(Set<Long> roids, ResultType resultType, boolean sync) throws UserException, ServerException;

	SDownloadResult getDownloadData(String actionID) throws UserException, ServerException;

	LongActionState getDownloadState(String actionID) throws UserException, ServerException;

	long addUser(String username, String name, SUserType type, boolean selfRegistration) throws UserException, ServerException;

	void changeUserType(long uoid, SUserType userType) throws UserException, ServerException;

	SProject addProject(String projectName) throws UserException, ServerException;

	SProject addProjectAsSubProject(String projectName, long parentPoid) throws UserException, ServerException;

	void updateProject(SProject sProject) throws UserException, ServerException;

	void updateRevision(SRevision sRevision) throws UserException, ServerException;

	boolean addUserToProject(long uoid, long poid) throws UserException, ServerException;

	boolean removeUserFromProject(long uoid, long poid) throws UserException, ServerException;

	boolean deleteProject(long poid) throws UserException, ServerException;

	boolean deleteUser(long uoid) throws UserException, ServerException;

	List<SProject> getAllProjects() throws UserException, ServerException;

	List<SProject> getAllReadableProjects() throws UserException, ServerException;

	List<SUser> getAllUsers() throws UserException, ServerException;

	List<SRevision> getAllRevisionsOfProject(long poid) throws UserException, ServerException;

	List<SCheckout> getAllCheckoutsOfProject(long poid) throws UserException, ServerException;

	List<SRevision> getAllRevisionsByUser(long uoid) throws UserException, ServerException;

	List<SCheckout> getAllCheckoutsByUser(long uoid) throws UserException, ServerException;

	List<SCheckout> getAllCheckoutsOfRevision(long roid) throws UserException, ServerException;

	SProject getProjectByPoid(long poid) throws UserException, ServerException;

	SRevision getRevision(long roid) throws UserException, ServerException;

	List<String> getAvailableClasses() throws UserException, ServerException;

	DatabaseInformation getDatabaseInformation() throws UserException, ServerException;

	Date getLastDatabaseReset() throws UserException, ServerException;

	SUser getLoggedInUser() throws UserException, ServerException;

	List<SProject> getAllNonAuthorizedProjectsOfUser(long uoid) throws UserException, ServerException;

	void logout() throws UserException, ServerException;

	boolean changePassword(long uoid, String oldPassword, String newPassword) throws UserException, ServerException;

	SUser getUserByUserName(String username) throws UserException, ServerException;

	boolean undeleteProject(@WebParam(name = "poid", partName = "undeleteProject.poid") long poid) throws UserException, ServerException;

	boolean undeleteUser(@WebParam(name = "uoid", partName = "undeleteUser.uoid") long uoid) throws UserException, ServerException;

	SCompareResult compare(long roid1, long roid2, SCompareType sCompareType) throws UserException, ServerException;

	SRevisionSummary getRevisionSummary(long roid) throws UserException, ServerException;

	boolean userHasCheckinRights(long poid) throws UserException, ServerException;

	Set<String> getShowCheckoutWarning(long poid, long uoid) throws UserException, ServerException;

	boolean userHasRights(long poid) throws UserException, ServerException;

	SDataObject getDataObjectByOid(long roid, long oid, String className) throws UserException, ServerException;

	SDataObject getDataObjectByGuid(long roid, String guid) throws UserException, ServerException;

	List<SDataObject> getDataObjectsByType(long roid, String className) throws UserException, ServerException;

	List<SGuidClash> findClashesByGuid(SClashDetectionSettings sClashDetectionSettings) throws UserException, ServerException;

	List<SEidClash> findClashesByEid(SClashDetectionSettings sClashDetectionSettings) throws UserException, ServerException;

	List<SClash> getLastClashes(long roid) throws UserException, ServerException;

	SCheckinResult branchToNewProject(long roid, String projectName, String comment) throws UserException, ServerException;

	SCheckinResult branchToExistingProject(long roid, long destPoid, String comment) throws UserException, ServerException;

	SGeoTag getGeoTag(long goid) throws UserException, ServerException;

	void updateGeoTag(SGeoTag sGeoTag) throws UserException, ServerException;

	SClashDetectionSettings getClashDetectionSettings(long cdsoid) throws UserException, ServerException;

	void updateClashDetectionSettings(SClashDetectionSettings sClashDetectionSettings) throws UserException, ServerException;

	SUser getUserByUoid(long uoid) throws UserException, ServerException;

	SUser getAnonymousUser() throws UserException, ServerException;

	List<SUser> getAllNonAuthorizedUsersOfProject(long poid) throws UserException, ServerException;

	List<SUser> getAllAuthorizedUsersOfProject(long poid) throws UserException, ServerException;

	List<SProject> getUsersProjects(long uoid) throws UserException, ServerException;

	List<SProject> getProjectByName(String name) throws UserException, ServerException;

	void setRevisionTag(long roid, String tag) throws UserException, ServerException;

	List<SProject> getSubProjects(long poid) throws UserException, ServerException;

	boolean isExportTypeEnabled(ResultType resultType) throws UserException, ServerException;

	void setExportTypeEnabled(ResultType resultType, boolean enabled) throws UserException, ServerException;

	SUser getCurrentUser() throws UserException, ServerException;

	boolean isLoggedIn() throws UserException, ServerException;

	void loginAnonymous() throws UserException, ServerException;

	Date getActiveSince() throws UserException, ServerException;

	Date getLastActive() throws UserException, ServerException;

	Token getCurrentToken() throws UserException, ServerException;

	SAccessMethod getAccessMethod() throws UserException, ServerException;

	Set<ResultType> getEnabledResultTypes() throws UserException, ServerException;

	Set<ResultType> getAllResultTypes() throws UserException, ServerException;

	List<SCheckout> getAllCheckoutsOfProjectAndSubProjects(long poid) throws UserException, ServerException;

	void requestPasswordChange(long uoid) throws UserException, ServerException;

	void validateAccount(long uoid, String token, String password) throws UserException, ServerException;

	void sendClashesEmail(SClashDetectionSettings sClashDetectionSettings, long poid, Set<String> addressesTo) throws UserException, ServerException;

	void sendCompareEmail(SCompareType sCompareType, long poid, long roid1,	long roid2, String address) throws UserException, ServerException;
	
	void setup(String siteAddress, String smtpServer, String adminName, String adminUsername, String adminPassword, boolean createAnonymousUser) throws UserException, ServerException;

	String getSettingCustomLogoAddress() throws UserException, ServerException;

	void setSettingCustomLogoAddress(String customLogoAddress) throws UserException, ServerException;

	String getSettingEmailSenderAddress() throws UserException, ServerException;

	void setSettingEmailSenderAddress(String emailSenderAddress) throws UserException, ServerException;

	String getSettingEnabledExportTypes() throws UserException, ServerException;

	void setSettingEnabledExportTypes(Set<ResultType> enabledExportTypes) throws UserException, ServerException;

	String getSettingRegistrationAddition() throws UserException, ServerException;

	void setSettingRegistrationAddition(String registrationAddition) throws UserException, ServerException;

	String getSettingSiteAddress() throws UserException, ServerException;

	void setSettingSiteAddress(String siteAddress) throws UserException, ServerException;

	String getSettingSmtpServer() throws UserException, ServerException;

	void setSettingSmtpServer(String smtpServer) throws UserException, ServerException;

	boolean isSettingAllowSelfRegistration() throws UserException, ServerException;

	void setSettingAllowSelfRegistration(boolean allowSelfRegistration) throws UserException, ServerException;

	boolean isSettingAllowUsersToCreateTopLevelProjects() throws UserException, ServerException;

	void setSettingAllowUsersToCreateTopLevelProjects(boolean allowUsersToCreateTopLevelProjects) throws UserException, ServerException;

	boolean isSettingAutoTestClashes() throws UserException, ServerException;

	void setSettingAutoTestClashes(boolean autoTestClashes) throws UserException, ServerException;

	boolean isSettingCheckinMergingEnabled() throws UserException, ServerException;

	void setSettingCheckinMergingEnabled(boolean checkinMergingEnabled) throws UserException, ServerException;

	boolean isSettingIntelligentMerging() throws UserException, ServerException;

	void setSettingIntelligentMerging(boolean intelligentMerging) throws UserException, ServerException;

	boolean isSettingSendConfirmationEmailAfterRegistration() throws UserException, ServerException;

	void setSettingSendConfirmationEmailAfterRegistration(boolean sendConfirmationEmailAfterRegistration) throws UserException, ServerException;

	boolean isSettingShowVersionUpgradeAvailable() throws UserException, ServerException;

	void setSettingShowVersionUpgradeAvailable(boolean showVersionUpgradeAvailable) throws UserException, ServerException;

	boolean isSettingUseCaching() throws UserException, ServerException;

	void setSettingUseCaching(boolean useCaching) throws UserException, ServerException;
	
	List<SLogAction> getLogs() throws UserException, ServerException;

	List<SUserSession> getActiveUserSessions() throws ServerException, ServiceException;

	List<SLongAction> getActiveLongActions() throws ServerException, ServiceException;

	Set<SMigration> getMigrations();

	void migrateDatabase() throws ServerException;
}}}