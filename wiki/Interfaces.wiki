#summary Ways to interact with the BIMserver

= Introduction =

All communication with the BIMserver is done through the "Service Interface". This is basically a Java interface with a large collections of methods that can be remotely executed. Because all kinds of languages should be able to communicate with the BIMserver from remote computers, a few different language independent network based protocols have been added:
  * [SOAPExample SOAP]
  * [RESTInterface REST]
  * [ProtocolBuffers Protocol Buffers]

This page describes the actual calls in the "Service Interface", please 
refer to the protocol-specific pages for the actual usage.

Note: This page describes the yet unreleased 1.1 version of the BIMserver

A few parameters are used a lot and always mean the same:
||Name||Type||Meaning||
||poid||Long||Project Object Id||
||roid||Long||Revision Object Id||

Some calls can be both synchronous as asynchronous, this can be useful for long running actions such as check-in/download.

A calls deleting objects do not really delete them, admin users can 'undelete' objects.

= Basic calls =

Just a simple call to test the communication, simply returns the given text.
{{{
	String ping(String in);
}}}
Login with a username/password
{{{
	boolean login(String username, String password) throws UserException, ServerException;
}}}
Automatic login (used by the web interface). The hash is computed this way: sha256(username + sha256(password)). The idea is not to store the hash for too long. Hashes expire automatically when the user changes its password.
{{{
	boolean autologin(String username, String hash) throws UserException, ServerException;
}}}
Check-in a new IFC file. The DataHandler usually ends up as a byte[] in the implementations. The sync version blocks until the file is actually checked-in, the async version returns faster, but won't always be done after the call.
{{{
	SCheckinResult checkinSync(long poid, String comment, long fileSize, DataHandler ifcFile, boolean merge) throws UserException, ServerException;

	SCheckinResult checkinAsync(long poid, String comment, long fileSize, DataHandler ifcFile, boolean merge) throws UserException, ServerException;
}}}
Checks out a certain revision
{{{
	String checkout(long roid, ResultType resultType, boolean sync) throws UserException, ServerException;
}}}
Checks out the last revision
{{{
	String checkoutLastRevision(long poid, ResultType resultType, boolean sync) throws UserException, ServerException;
}}}
Download a certain revision
{{{
	String download(long roid, ResultType resultType, boolean sync) throws UserException, ServerException;
}}}
Download a given set of objects (by oid) within a set of revisions
{{{
	String downloadByOids(Set<Long> roids, Set<Long> oids, ResultType resultType, boolean sync) throws UserException, ServerException;
}}}
Download all objects of a certain type, className can for example be "IfcWindow".
{{{
	String downloadOfType(long roid, String className, ResultType resultType, boolean sync) throws UserException, ServerException;
}}}
Download all objects within the given revisions that have the given GUIDs.
{{{
	String downloadByGuids(Set<Long> roids, Set<String> guids, ResultType resultType, boolean sync) throws UserException, ServerException;
}}}
Download multiple revisions combined in one file
{{{
	String downloadProjects(Set<Long> roids, ResultType resultType, boolean sync) throws UserException, ServerException;
}}}
Get the actual data
{{{
	SDownloadResult getDownloadData(String actionID) throws UserException, ServerException;
}}}
Returns the state of the given download action
{{{
	LongActionState getDownloadState(String actionID) throws UserException, ServerException;
}}}
Add a new user, the selfRegistration parameter indicates whether the user is registering itself, which has effect on the e-mail send to the user.
{{{

	long addUser(String username, String name, SUserType type, boolean selfRegistration) throws UserException, ServerException;
}}}
Change the user type of an existing user
{{{

	void changeUserType(long uoid, SUserType userType) throws UserException, ServerException;
}}}
Add a new project, project name must be unique within the server
{{{

	SProject addProject(String projectName) throws UserException, ServerException;
}}}
Add a new project as a subproject of another project, project name must be unique within the list of subprojects of the parent project
{{{

	SProject addProjectAsSubProject(String projectName, long parentPoid) throws UserException, ServerException;
}}}
Update a project
{{{

	void updateProject(SProject sProject) throws UserException, ServerException;
}}}
Update a revision
{{{

	void updateRevision(SRevision sRevision) throws UserException, ServerException;
}}}
Add an existing user to an existing project
{{{

	boolean addUserToProject(long uoid, long poid) throws UserException, ServerException;
}}}
Remove a user from a project
{{{

	boolean removeUserFromProject(long uoid, long poid) throws UserException, ServerException;
}}}
Delete a project
{{{

	boolean deleteProject(long poid) throws UserException, ServerException;
}}}
Delete a user
{{{

	boolean deleteUser(long uoid) throws UserException, ServerException;
}}}
Retrieves all projects the authenticated user has rights on
{{{

	List<SProject> getAllProjects() throws UserException, ServerException;
}}}
Retrieves all projects the authenticated user has read rights on
{{{

	List<SProject> getAllReadableProjects() throws UserException, ServerException;
}}}
Returns a list of all users
{{{

	List<SUser> getAllUsers() throws UserException, ServerException;
}}}
Returns a list of all revisions of a project
{{{

	List<SRevision> getAllRevisionsOfProject(long poid) throws UserException, ServerException;
}}}
Retrieves a list of all checkouts on a project
{{{

	List<SCheckout> getAllCheckoutsOfProject(long poid) throws UserException, ServerException;
}}}
Returns a list of all revisions the given user has created
{{{

	List<SRevision> getAllRevisionsByUser(long uoid) throws UserException, ServerException;
}}}
Returns a list of all checkouts of the given user
{{{

	List<SCheckout> getAllCheckoutsByUser(long uoid) throws UserException, ServerException;
}}}
Returns a list of all checkouts on the given revision
{{{

	List<SCheckout> getAllCheckoutsOfRevision(long roid) throws UserException, ServerException;
}}}
Returns a project object
{{{

	SProject getProjectByPoid(long poid) throws UserException, ServerException;
}}}
Returns a revision object
{{{

	SRevision getRevision(long roid) throws UserException, ServerException;
}}}
Returns a list of available classes, these classes can be used in className parameter in the "downloadOfType" call
{{{

	List<String> getAvailableClasses() throws UserException, ServerException;
}}}
Returns the currently authenticated user
{{{

	SUser getLoggedInUser() throws UserException, ServerException;
}}}
Returns a list of all users that are not authorized to write on this project
{{{

	List<SProject> getAllNonAuthorizedProjectsOfUser(long uoid) throws UserException, ServerException;
}}}
{{{

	void logout() throws UserException, ServerException;
}}}
{{{

	boolean changePassword(long uoid, String oldPassword, String newPassword) throws UserException, ServerException;
}}}
{{{

	SUser getUserByUserName(String username) throws UserException, ServerException;
}}}
{{{

	boolean undeleteProject(long poid) throws UserException, ServerException;
}}}
{{{

	boolean undeleteUser(long uoid) throws UserException, ServerException;
}}}
{{{

	SCompareResult compare(long roid1, long roid2, SCompareType sCompareType) throws UserException, ServerException;
}}}
{{{

	SRevisionSummary getRevisionSummary(long roid) throws UserException, ServerException;
}}}
{{{

	boolean userHasCheckinRights(long poid) throws UserException, ServerException;
}}}
{{{

	Set<String> getShowCheckoutWarning(long poid, long uoid) throws UserException, ServerException;
}}}
{{{

	boolean userHasRights(long poid) throws UserException, ServerException;
}}}
{{{

	SDataObject getDataObjectByOid(long roid, long oid, String className) throws UserException, ServerException;
}}}
{{{

	SDataObject getDataObjectByGuid(long roid, String guid) throws UserException, ServerException;
}}}
{{{

	List<SDataObject> getDataObjectsByType(long roid, String className) throws UserException, ServerException;
}}}
{{{

	List<SGuidClash> findClashesByGuid(SClashDetectionSettings sClashDetectionSettings) throws UserException, ServerException;
}}}
{{{

	List<SEidClash> findClashesByEid(SClashDetectionSettings sClashDetectionSettings) throws UserException, ServerException;
}}}
{{{

	List<SClash> getLastClashes(long roid) throws UserException, ServerException;
}}}
{{{

	SCheckinResult branchToNewProject(long roid, String projectName, String comment) throws UserException, ServerException;
}}}
{{{

	SCheckinResult branchToExistingProject(long roid, long destPoid, String comment) throws UserException, ServerException;
}}}
{{{

	SGeoTag getGeoTag(long goid) throws UserException, ServerException;
}}}
{{{

	void updateGeoTag(SGeoTag sGeoTag) throws UserException, ServerException;
}}}
{{{

	SClashDetectionSettings getClashDetectionSettings(long cdsoid) throws UserException, ServerException;
}}}
{{{

	void updateClashDetectionSettings(SClashDetectionSettings sClashDetectionSettings) throws UserException, ServerException;
}}}
{{{

	SUser getUserByUoid(long uoid) throws UserException, ServerException;
}}}
{{{

	SUser getAnonymousUser() throws UserException, ServerException;
}}}
{{{

	List<SUser> getAllNonAuthorizedUsersOfProject(long poid) throws UserException, ServerException;
}}}
{{{

	List<SUser> getAllAuthorizedUsersOfProject(long poid) throws UserException, ServerException;
}}}
{{{

	List<SProject> getUsersProjects(long uoid) throws UserException, ServerException;
}}}
{{{

	List<SProject> getProjectByName(String name) throws UserException, ServerException;
}}}
{{{

	void setRevisionTag(long roid, String tag) throws UserException, ServerException;
}}}
{{{

	List<SProject> getSubProjects(long poid) throws UserException, ServerException;
}}}
{{{

	SUser getCurrentUser() throws UserException, ServerException;
}}}
{{{

	boolean isLoggedIn() throws UserException, ServerException;
}}}
{{{

	void loginAnonymous() throws UserException, ServerException;
}}}
{{{

	Date getActiveSince() throws UserException, ServerException;
}}}
{{{

	Date getLastActive() throws UserException, ServerException;
}}}
{{{

	Token getCurrentToken() throws UserException, ServerException;
}}}
{{{

	SAccessMethod getAccessMethod() throws UserException, ServerException;
}}}
{{{

	List<SCheckout> getAllCheckoutsOfProjectAndSubProjects(long poid) throws UserException, ServerException;
}}}
{{{

	void requestPasswordChange(long uoid) throws UserException, ServerException;
}}}
{{{

	void validateAccount(long uoid, String token, String password) throws UserException, ServerException;
}}}
{{{

	void sendClashesEmail(SClashDetectionSettings sClashDetectionSettings, long poid, Set<String> addressesTo) throws UserException, ServerException;
}}}
{{{

	void sendCompareEmail(SCompareType sCompareType, long poid, long roid1,	long roid2, String address) throws UserException, ServerException;
}}}

= Admin =

Get information about the database, see the DatabaseInformation object for more details
{{{
	DatabaseInformation getDatabaseInformation() throws UserException, ServerException;
}}}
Returns when the database was last reset (created)
{{{
	Date getLastDatabaseReset() throws UserException, ServerException;
}}}
Setup the BIMserver (this call is mandatory for new databases)
{{{
	void setup(String siteAddress, String smtpServer, String adminName, String adminUsername, String adminPassword, boolean createAnonymousUser) throws UserException, ServerException;
}}}
Get all log records, this can be a lot for long-running/active BIMservers
{{{	
	List<SLogAction> getLogs() throws UserException, ServerException;
}}}
Returns a list of active user sessions, user sessions are cleaned up after logout, or expire after a certain amount of time (30 minutes by default)
{{{
	List<SUserSession> getActiveUserSessions() throws ServerException, ServiceException;
}}}
Returns a list of active long running actions (such as checkins, downloads, clash detection etc...)
{{{
	List<SLongAction> getActiveLongActions() throws ServerException, ServiceException;
}}}
Returns a list of all migrations, every migration has a field "executed" indicating whether or not it has been executed
{{{
	Set<SMigration> getMigrations();
}}}
Migrates the database to the application version number
{{{
	void migrateDatabase() throws ServerException;
}}}

= Settings =

These methods allow you to view and edit settings of the BIMserver, the authenticated user must be an administrator.

{{{
	Set<ResultType> getEnabledResultTypes() throws UserException, ServerException;

	Set<ResultType> getAllResultTypes() throws UserException, ServerException;

	boolean isExportTypeEnabled(ResultType resultType) throws UserException, ServerException;

	void setExportTypeEnabled(ResultType resultType, boolean enabled) throws UserException, ServerException;

	String getSettingCustomLogoAddress() throws UserException, ServerException;

	void setSettingCustomLogoAddress(String customLogoAddress) throws UserException, ServerException;

	String getSettingEmailSenderAddress() throws UserException, ServerException;

	void setSettingEmailSenderAddress(String emailSenderAddress) throws UserException, ServerException;

	String getSettingEnabledExportTypes() throws UserException, ServerException;

	void setSettingEnabledExportTypes(Set<ResultType> enabledExportTypes) throws UserException, ServerException;

	String getSettingRegistrationAddition() throws UserException, ServerException;

	void setSettingRegistrationAddition(String registrationAddition) throws UserException, ServerException;

	String getSettingSiteAddress() throws UserException, ServerException;

	void setSettingSiteAddress(String siteAddress) throws UserException, ServerException;

	String getSettingSmtpServer() throws UserException, ServerException;

	void setSettingSmtpServer(String smtpServer) throws UserException, ServerException;

	boolean isSettingAllowSelfRegistration() throws UserException, ServerException;

	void setSettingAllowSelfRegistration(boolean allowSelfRegistration) throws UserException, ServerException;

	boolean isSettingAllowUsersToCreateTopLevelProjects() throws UserException, ServerException;

	void setSettingAllowUsersToCreateTopLevelProjects(boolean allowUsersToCreateTopLevelProjects) throws UserException, ServerException;

	boolean isSettingAutoTestClashes() throws UserException, ServerException;

	void setSettingAutoTestClashes(boolean autoTestClashes) throws UserException, ServerException;

	boolean isSettingCheckinMergingEnabled() throws UserException, ServerException;

	void setSettingCheckinMergingEnabled(boolean checkinMergingEnabled) throws UserException, ServerException;

	boolean isSettingIntelligentMerging() throws UserException, ServerException;

	void setSettingIntelligentMerging(boolean intelligentMerging) throws UserException, ServerException;

	boolean isSettingSendConfirmationEmailAfterRegistration() throws UserException, ServerException;

	void setSettingSendConfirmationEmailAfterRegistration(boolean sendConfirmationEmailAfterRegistration) throws UserException, ServerException;

	boolean isSettingShowVersionUpgradeAvailable() throws UserException, ServerException;

	void setSettingShowVersionUpgradeAvailable(boolean showVersionUpgradeAvailable) throws UserException, ServerException;

	boolean isSettingUseCaching() throws UserException, ServerException;

	void setSettingUseCaching(boolean useCaching) throws UserException, ServerException;
}}}