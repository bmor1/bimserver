#summary This page describes a few SOAP calls
#labels Developerguide

= Introduction =

The code examples are in Java, but any other language that generates a SOAP interface based on the WSDL file should have a similar structure.

= Authentication =

To be able to do SOAP calls, a client should first acquire a token. A token is valid for a fixed time (1 hour currently).

{{{
Token login(String username, String password)
}}}

This method should be called with a valid username/password combination, when successful, a Token object will be returned. This token object should be used in all subsequent calls to the BIMserver.

The Token object contains two fields, the Token object itself should be handled as if it were immutable.

{{{
public class Token {
  private String tokenString;
  private long expires;

  // Getters and Setters
}
}}}

= Get all projects =

To get a list of all projects on which the currently authenticated user has rights, use the following method:

{{{
List<SProject> getAllProjects(Token token)
}}}

The SProject class looks like this:

{{{
  private long oid; // This is the unique Object Identifier
  private int id; // This field is not used anymore and should be removed
  private String name; // The project's name
  private List<Long> hasAuthorizedUsers; // A list of all authorized users, corresponds with User.oid
  private List<Long> concreteRevisions; // A list of all concrete revisions on this project
  private List<Long> revisions; // A list of Object Identifiers of all revisions of this project
  private long lastConcreteRevisionId; // The Object Identifier of the last ConcreteRevision
  private long lastRevisionId; // The Object Identifier of the last Revision
  private List<Long> checkouts; // A list of all Object Identifiers of the checkouts related to this project
  private SObjectState state; // The current ObjectState
  private Date createdDate; // The date on which this project was created
  private long createdById; // The Object Identifier of the user that created this project
  private long geoTagId; // A link to the SGeoTag
  private List<Long> subProjects; // A list of the Object Identifiers of all sub projects
  private long parentId; // A link to the parent project
  private String description; // The description of this project
  private long clashDetectionSettingsId; // The Object Identifier of the SClashDetectionSettings object referenced by this project
  private SSIPrefix exportLengthMeasurePrefix; // An enum reference describing the default measurement prefix

  // Public Getters and Setters
}}}

= Get all revisions of a project =

When you have selected the right project, you can select all revisions of this project with the following call:

{{{
List<SRevision> getAllRevisionsOfProject(Token token, long poid)
}}}

The 'poid' parameter can be found in the SProject.oid field.

= Download a certain revision =

After selecting the right revision, use the following call to download a certain revision:

{{{
CheckoutResult download(Token token, long roid, ResultType resultType)
}}}

The 'roid' parameter can be found in SRevision.oid. The ResultType is an enumeration with the following values:

{{{
public enum ResultType
  CITYGML,
  COLLADA,
  IFC,
  IFCXML,
  O3D_JSON,
  OBJECT_INFO,
  TEXT,
  KML,
  KMZ
}
}}}

The resulting CheckoutResult has a reference to the file (the field "file"). Make sure to enable MTOM support in your SOAP stack.

In Java you can use the following code to get the actual file data (as an InputStream):

{{{
InputStream inputStream = checkoutResult.getFile().getInputStream();
}}}

= Logout =

When you are done calling BIMserver methods, you should logout which frees system resources right away (if you don't however, the BIMserver will still remove session data when the token expires).

{{{
void logout(Token token)
}}}

Just call this method with the token, and you're done.