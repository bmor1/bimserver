#summary This page describes a few SOAP calls to get a model from a BIMserver
#labels Developerguide

= Introduction =

The code examples are in Java, but any other language that generates a SOAP interface based on the WSDL file should have a similar structure.

Almost all methods can throw a UserException or ServerException exception, which will be converted to a SOAP Fault when accessing the ServiceInterface via SOAP.

= Authentication =

The newest version of the BIMserver is using sessions to remember the user credentials, versions before 1.0 were using a token object as the first parameter of every call which was not optimal.

Make sure to enable session management in your client, otherwise the server won't be able to remember who you are and you will get this message:
{{{
"Authentication required for this call"
}}}

For Apache CXF, you can enable sessions this way:
{{{
((javax.xml.ws.BindingProvider)port).getRequestContext().put(BindingProvider.SESSION_MAINTAIN_PROPERTY, true);
}}}

= Get all projects =

To get a list of all projects on which the currently authenticated user has rights, use the following method:

{{{
List<SProject> getAllProjects() throws UserException
}}}

The SProject class looks like this:

{{{
public class SProject {
  private long oid; // This is the unique Object Identifier of this Project
  private int id; // This field is not used anymore and should be removed
  private String name; // The project's name
  private List<Long> hasAuthorizedUsers; // A list of all Object Identifiers of the authorized users
  private List<Long> concreteRevisions; // A list of all Object Identifiers of the ConcreteRevisions on this project
  private List<Long> revisions; // A list of Object Identifiers of all Revisions of this project
  private long lastConcreteRevisionId; // The Object Identifier of the last ConcreteRevision
  private long lastRevisionId; // The Object Identifier of the last Revision
  private List<Long> checkouts; // A list of all Object Identifiers of the checkouts related to this project
  private SObjectState state; // The current ObjectState
  private Date createdDate; // The date on which this project was created
  private long createdById; // The Object Identifier of the user that created this project
  private long geoTagId; // A link to the SGeoTag
  private List<Long> subProjects; // A list of the Object Identifiers of all sub projects
  private long parentId; // The Object Identifier of the parent project, -1 if null
  private String description; // The description of this project
  private long clashDetectionSettingsId; // The Object Identifier of the SClashDetectionSettings object referenced by this project
  private SSIPrefix exportLengthMeasurePrefix; // An enum reference describing the default measurement prefix

  // Public Getters and Setters
}
}}}

= Get all revisions of a project =

When you have selected the right project, you can select all revisions of this project with the following call:

{{{
List<SRevision> getAllRevisionsOfProject(long poid) throws UserException
}}}

The 'poid' parameter can be found in the SProject.oid field.

{{{
public class SRevision {
  private long oid; // This is the unique Object Identifier of this Revision
  private int id; // This is a unique id within the Project this Revision belongs to, 1 would be the first revision on this project, 5 the 5th and so on  
  private long userId; // The Object Identifier of the User that uploaded this Revision
  private Date date; // The date on which this Revision was uploaded
  private String comment; // The comment added by the uploader
  private long size; // The amount of object in this model
  private List<Long> concreteRevisions; // A list of the Object Identifiers of all ConcreteRevisions belonging to this Revision
  private long lastConcreteRevisionId; // The Object Identifier of the last ConcreteRevision
  private List<Long> checkouts; // A list of all Object Identifiers of all checkouts of this Revision
  private long projectId; // The Object Identifier of the Project this Revision belongs to
  private boolean finalized; // Weather this revision is finalized (complete processed in the database)
  private List<Long> lastClashes; // A list of Object Identifiers of all Clashes found in the last clash detection
  private boolean processingClashes; // Weather the server is busy finding clashes in this Revision
  private String tag; // A possible tag

  // Public Getters and Setters
}
}}}

= Download a certain revision =

After selecting the right revision, use the following call to download a certain revision:

{{{
CheckoutResult download(long roid, ResultType resultType) throws UserException
}}}

The 'roid' parameter can be found in SRevision.oid. The ResultType is an enumeration with the following values:

{{{
public enum ResultType
  CITYGML,
  COLLADA,
  IFC,
  IFCXML,
  O3D_JSON,
  OBJECT_INFO,
  TEXT,
  KML,
  KMZ
}
}}}

The resulting CheckoutResult has a reference to the file (the field "file"). Make sure to enable MTOM support in your SOAP stack.

In Java you can use the following code to get the actual file data (as an InputStream):

{{{
InputStream inputStream = checkoutResult.getFile().getInputStream();
}}}

{{{
public class CheckoutResult {
  private DataHandler file; // A reference to the actual data
  private String projectName; // The name of the project (Project.name)
  private int revisionNr; // The revision id (Revision.id)

  // Public Getters and Setters
}
}}}

= Logout =

When you are done calling BIMserver methods, you should logout which frees system resources right away (if you don't however, the BIMserver will still remove session data when the session expires).

{{{
void logout()
}}}